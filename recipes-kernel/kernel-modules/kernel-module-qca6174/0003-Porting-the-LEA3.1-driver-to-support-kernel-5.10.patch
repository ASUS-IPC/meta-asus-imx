From adf95c2ab7cb3c8a97942694177deb598157d306 Mon Sep 17 00:00:00 2001
From: andy3_kuo <andy3_kuo@asus.com>
Date: Wed, 28 Apr 2021 11:54:10 +0800
Subject: [PATCH 3/5] Porting the LEA3.1 driver to support kernel 5.10

---
 CORE/EPPING/src/epping_txrx.c                  |  5 ++++-
 CORE/HDD/inc/wlan_hdd_softap_tx_rx.h           |  4 ++++
 CORE/HDD/inc/wlan_hdd_tx_rx.h                  |  4 ++++
 CORE/HDD/src/wlan_hdd_memdump.c                | 13 +++++++++----
 CORE/HDD/src/wlan_hdd_softap_tx_rx.c           |  4 ++++
 CORE/HDD/src/wlan_hdd_tx_rx.c                  |  4 ++++
 CORE/SERVICES/BMI/ol_fw.c                      | 13 +++++++++----
 CORE/SERVICES/COMMON/adf/adf_nbuf.c            |  4 ++++
 CORE/SERVICES/COMMON/adf/adf_os_time.h         |  2 +-
 .../SERVICES/COMMON/adf/linux/adf_os_dma_pvt.h | 18 ++++++++++--------
 CORE/SERVICES/HIF/ath_procfs.c                 | 11 +++++++++--
 CORE/SVC/src/logging/wlan_logging_sock_svc.c   |  2 +-
 CORE/UTILS/PKTLOG/linux_ac.c                   | 14 +++++++++++---
 CORE/VOSS/inc/vos_cnss.h                       | 10 +++++++---
 CORE/VOSS/src/vos_api.c                        |  5 +----
 CORE/VOSS/src/vos_packet.c                     |  2 +-
 CORE/VOSS/src/vos_timer.c                      |  8 ++++----
 17 files changed, 87 insertions(+), 36 deletions(-)

diff --git a/CORE/EPPING/src/epping_txrx.c b/CORE/EPPING/src/epping_txrx.c
index d63a4cd8e..23243ffae 100644
--- a/CORE/EPPING/src/epping_txrx.c
+++ b/CORE/EPPING/src/epping_txrx.c
@@ -142,8 +142,11 @@ static void epping_ndev_uninit (struct net_device *dev)
 end:
    return;
 }
-
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+void epping_tx_queue_timeout(struct net_device *dev, unsigned int txqueue)
+#else
 void epping_tx_queue_timeout(struct net_device *dev)
+#endif
 {
    epping_adapter_t *pAdapter;
 
diff --git a/CORE/HDD/inc/wlan_hdd_softap_tx_rx.h b/CORE/HDD/inc/wlan_hdd_softap_tx_rx.h
index ba2a5c5d7..26e891088 100644
--- a/CORE/HDD/inc/wlan_hdd_softap_tx_rx.h
+++ b/CORE/HDD/inc/wlan_hdd_softap_tx_rx.h
@@ -78,7 +78,11 @@ extern int hdd_softap_hard_start_xmit(struct sk_buff *skb, struct net_device *de
   @param dev : [in] pointer to Libra network device
   @return    : None
   ===========================================================================*/
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+extern void hdd_softap_tx_timeout(struct net_device *dev, unsigned int txqueue);
+#else
 extern void hdd_softap_tx_timeout(struct net_device *dev);
+#endif
 
 /**============================================================================
   @brief hdd_softap_stats() - Function registered with the Linux OS for
diff --git a/CORE/HDD/inc/wlan_hdd_tx_rx.h b/CORE/HDD/inc/wlan_hdd_tx_rx.h
index 2fd820c58..9aa197701 100644
--- a/CORE/HDD/inc/wlan_hdd_tx_rx.h
+++ b/CORE/HDD/inc/wlan_hdd_tx_rx.h
@@ -119,7 +119,11 @@ extern void hdd_drop_skb_list(hdd_adapter_t *adapter, struct sk_buff *skb,
   @param dev : [in] pointer to Libra network device
   @return    : None
   ===========================================================================*/
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+extern void hdd_tx_timeout(struct net_device *dev, unsigned int txqueue);
+#else
 extern void hdd_tx_timeout(struct net_device *dev);
+#endif
 
 /**============================================================================
   @brief hdd_stats() - Function registered with the Linux OS for
diff --git a/CORE/HDD/src/wlan_hdd_memdump.c b/CORE/HDD/src/wlan_hdd_memdump.c
index 09deb2e61..c16eba4e2 100644
--- a/CORE/HDD/src/wlan_hdd_memdump.c
+++ b/CORE/HDD/src/wlan_hdd_memdump.c
@@ -205,16 +205,21 @@ static ssize_t hdd_driver_memdump_read(struct file *file, char __user *buf,
 
 
 /**
- * struct driver_dump_fops - file operations for driver dump feature
+ * struct driver_dump_ops - proc_ops / file operations for driver dump feature
  * @read - read function for driver dump operation.
  *
  * This structure initialize the file operation handle for memory
  * dump feature
  */
-static const struct file_operations driver_dump_fops = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+static struct proc_ops driver_dump_ops = {
+	proc_read: hdd_driver_memdump_read
+};
+#else
+static const struct file_operations driver_dump_ops = {
 	read: hdd_driver_memdump_read
 };
-
+#endif
 /**
  * hdd_driver_memdump_procfs_init() - Initialize procfs for driver memory dump
  * @hdd_ctx: hdd context
@@ -235,7 +240,7 @@ static int hdd_driver_memdump_procfs_init(hdd_context_t *hdd_ctx)
 
 	proc_file_driver = proc_create_data(PROCFS_DRIVER_DUMP_NAME,
 				     PROCFS_DRIVER_DUMP_PERM, proc_dir_driver,
-				     &driver_dump_fops, hdd_ctx);
+				     &driver_dump_ops, hdd_ctx);
 	if (proc_file_driver == NULL) {
 		remove_proc_entry(PROCFS_DRIVER_DUMP_NAME, proc_dir_driver);
 		pr_debug("Error: Could not initialize /proc/%s\n",
diff --git a/CORE/HDD/src/wlan_hdd_softap_tx_rx.c b/CORE/HDD/src/wlan_hdd_softap_tx_rx.c
index e1f105187..07f5d8835 100644
--- a/CORE/HDD/src/wlan_hdd_softap_tx_rx.c
+++ b/CORE/HDD/src/wlan_hdd_softap_tx_rx.c
@@ -558,7 +558,11 @@ static void __hdd_softap_tx_timeout(struct net_device *dev)
  *
  * Return: none
  */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+void hdd_softap_tx_timeout(struct net_device *dev, unsigned int txqueue)
+#else
 void hdd_softap_tx_timeout(struct net_device *dev)
+#endif
 {
 	vos_ssr_protect(__func__);
 	__hdd_softap_tx_timeout(dev);
diff --git a/CORE/HDD/src/wlan_hdd_tx_rx.c b/CORE/HDD/src/wlan_hdd_tx_rx.c
index 5fa42f629..79b8a7204 100644
--- a/CORE/HDD/src/wlan_hdd_tx_rx.c
+++ b/CORE/HDD/src/wlan_hdd_tx_rx.c
@@ -953,7 +953,11 @@ static void __hdd_tx_timeout(struct net_device *dev)
  *
  * Return: none
  */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+void hdd_tx_timeout(struct net_device *dev, unsigned int txqueue)
+#else
 void hdd_tx_timeout(struct net_device *dev)
+#endif
 {
 	vos_ssr_protect(__func__);
 	__hdd_tx_timeout(dev);
diff --git a/CORE/SERVICES/BMI/ol_fw.c b/CORE/SERVICES/BMI/ol_fw.c
index 4b15f1f56..be4588b94 100644
--- a/CORE/SERVICES/BMI/ol_fw.c
+++ b/CORE/SERVICES/BMI/ol_fw.c
@@ -454,16 +454,21 @@ static ssize_t crash_dump_read(struct file *file, char __user *buf,
 	return no_of_bytes_read;
 }
 /**
- * struct crash_dump_fops - file operations for crash firmware ram dump feature
+ * struct crash_dump_ops - file operations for crash firmware ram dump feature
  * @read - read function for crash dump operation.
  *
  * This structure initialize the file operation handle for crash
  * dump feature
  */
-static const struct file_operations crash_dump_fops = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+static const struct proc_ops crash_dump_ops = {
+	proc_read: crash_dump_read
+};
+#else
+static const struct file_operations crash_dump_ops = {
 	read: crash_dump_read
 };
-
+#endif
 /**
  * crash_dump_procfs_remove() - Remove file/dir under procfs for crash dump
  *
@@ -510,7 +515,7 @@ static int crash_dump_procfs_init(struct ol_softc *scn)
 	crash_file = proc_create_data(PROCFS_CRASH_DUMP_NAME,
 				     PROCFS_CRASH_DUMP_PERM,
 				     crash_dir,
-				     &crash_dump_fops, scn);
+				     &crash_dump_ops, scn);
 	if (crash_file == NULL) {
 		crash_dump_procfs_remove();
 		pr_debug("Error: Could not initialize /proc/debug/%s\n",
diff --git a/CORE/SERVICES/COMMON/adf/adf_nbuf.c b/CORE/SERVICES/COMMON/adf/adf_nbuf.c
index e2c47286d..19f5fd106 100644
--- a/CORE/SERVICES/COMMON/adf/adf_nbuf.c
+++ b/CORE/SERVICES/COMMON/adf/adf_nbuf.c
@@ -2445,7 +2445,11 @@ __adf_nbuf_validate_skb_cb(void)
 	 * 48 byte.
 	 */
 	BUILD_BUG_ON(sizeof(struct cvg_nbuf_cb) >
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 4, 0)
+		sizeof_field(struct sk_buff, cb));
+#else
 		FIELD_SIZEOF(struct sk_buff, cb));
+#endif
 }
 
 /**
diff --git a/CORE/SERVICES/COMMON/adf/adf_os_time.h b/CORE/SERVICES/COMMON/adf/adf_os_time.h
index 6c92692a5..c0b0ce30e 100644
--- a/CORE/SERVICES/COMMON/adf/adf_os_time.h
+++ b/CORE/SERVICES/COMMON/adf/adf_os_time.h
@@ -149,7 +149,7 @@ adf_os_msleep(int msecs)
 static inline a_uint64_t adf_get_boottime(void)
 {
 #ifdef CONFIG_CNSS
-   struct timespec ts;
+   struct timespec64 ts;
 
    vos_get_boottime_ts(&ts);
 
diff --git a/CORE/SERVICES/COMMON/adf/linux/adf_os_dma_pvt.h b/CORE/SERVICES/COMMON/adf/linux/adf_os_dma_pvt.h
index 6a5bcda73..854b20fa1 100644
--- a/CORE/SERVICES/COMMON/adf/linux/adf_os_dma_pvt.h
+++ b/CORE/SERVICES/COMMON/adf/linux/adf_os_dma_pvt.h
@@ -42,12 +42,15 @@
 #include <adf_os_types.h>
 #include <adf_os_util.h>
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 12, 0)
-#define __adf_os_dma_alloc_noncoherent(dev, size, daddr, flag, attr) dma_alloc_attrs(dev, size, daddr, flag, attr)
-#define __adf_os_dma_free_noncoherent(dev, size, vddr, daddr, attr) dma_free_attrs(dev, size, vddr, daddr, attr)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 9, 0)
+#define __adf_os_dma_alloc_noncoherent(dev, size, daddr, flag) dma_alloc_noncoherent(dev, size, daddr, DMA_BIDIRECTIONAL, flag)
+#define __adf_os_dma_free_noncoherent(dev, size, vddr, daddr) dma_free_noncoherent(dev, size, vddr, daddr, DMA_BIDIRECTIONAL)
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 12, 0)
+#define __adf_os_dma_alloc_noncoherent(dev, size, daddr, flag) dma_alloc_attrs(dev, size, daddr, flag, DMA_ATTR_NON_CONSISTENT)
+#define __adf_os_dma_free_noncoherent(dev, size, vddr, daddr) dma_free_attrs(dev, size, vddr, daddr, DMA_ATTR_NON_CONSISTENT)
 #else
-#define __adf_os_dma_alloc_noncoherent(dev, size, daddr, flag, attr) dma_alloc_noncoherent(dev, size, daddr, flag)
-#define __adf_os_dma_free_noncoherent(dev, size, vddr, daddr, attr) dma_free_noncoherent(dev, size, vddr, daddr)
+#define __adf_os_dma_alloc_noncoherent(dev, size, daddr, flag) dma_alloc_noncoherent(dev, size, daddr, flag)
+#define __adf_os_dma_free_noncoherent(dev, size, vddr, daddr) dma_free_noncoherent(dev, size, vddr, daddr)
 #endif
 /**
  * XXX:error handling
@@ -83,7 +86,7 @@ __adf_os_dmamem_alloc(adf_os_device_t     osdev,
    else
        vaddr = __adf_os_dma_alloc_noncoherent(osdev->dev, size,
                                      &lmap->seg[0].daddr,
-                                     GFP_ATOMIC, DMA_ATTR_NON_CONSISTENT);
+                                     GFP_ATOMIC);
 
    adf_os_assert(vaddr);
 
@@ -109,8 +112,7 @@ __adf_os_dmamem_free(adf_os_device_t    osdev, __adf_os_size_t size,
         dma_free_coherent(osdev->dev, size, vaddr, dmap->seg[0].daddr);
     else
         __adf_os_dma_free_noncoherent(osdev->dev, size, vaddr,
-                                      dmap->seg[0].daddr,
-                                      DMA_ATTR_NON_CONSISTENT);
+                                      dmap->seg[0].daddr);
 
     kfree(dmap);
 }
diff --git a/CORE/SERVICES/HIF/ath_procfs.c b/CORE/SERVICES/HIF/ath_procfs.c
index 66c7374dc..b362d90b1 100644
--- a/CORE/SERVICES/HIF/ath_procfs.c
+++ b/CORE/SERVICES/HIF/ath_procfs.c
@@ -167,10 +167,17 @@ static ssize_t ath_procfs_diag_write(struct file *file, const char __user *buf,
 	}
 }
 
-static const struct file_operations athdiag_fops = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+static const struct proc_ops athdiag_ops = {
+	.proc_read = ath_procfs_diag_read,
+	.proc_write = ath_procfs_diag_write,
+};
+#else
+static const struct file_operations athdiag_ops = {
 	.read = ath_procfs_diag_read,
 	.write = ath_procfs_diag_write,
 };
+#endif
 
 /**
  *This function is called when the module is loaded
@@ -188,7 +195,7 @@ int athdiag_procfs_init(void *scn)
 
 	proc_file = proc_create_data(PROCFS_NAME,
 					S_IRUSR | S_IWUSR, proc_dir,
-					&athdiag_fops, (void *)scn);
+					&athdiag_ops, (void *)scn);
 	if (proc_file == NULL) {
 		remove_proc_entry(PROCFS_NAME, proc_dir);
 		pr_debug("Error: Could not initialize /proc/%s\n",
diff --git a/CORE/SVC/src/logging/wlan_logging_sock_svc.c b/CORE/SVC/src/logging/wlan_logging_sock_svc.c
index 2667c27e8..ac5dcc0d9 100644
--- a/CORE/SVC/src/logging/wlan_logging_sock_svc.c
+++ b/CORE/SVC/src/logging/wlan_logging_sock_svc.c
@@ -313,7 +313,7 @@ int wlan_log_to_user(VOS_TRACE_LEVEL log_level, char *to_be_sent, int length)
 		vos_timer_get_timeval(&tv);
 		/* Convert rtc to local time */
 		local_time = (u32)(tv.tv_sec - (sys_tz.tz_minuteswest * 60));
-		rtc_time_to_tm(local_time, &tm);
+		rtc_time64_to_tm(local_time, &tm);
 		tlen = snprintf(tbuf, sizeof(tbuf),
 				"R%d: [%s][%02d:%02d:%02d.%06lu] ",
 				radio, current->comm, tm.tm_hour,
diff --git a/CORE/UTILS/PKTLOG/linux_ac.c b/CORE/UTILS/PKTLOG/linux_ac.c
index 0560288ac..720385a8a 100644
--- a/CORE/UTILS/PKTLOG/linux_ac.c
+++ b/CORE/UTILS/PKTLOG/linux_ac.c
@@ -87,11 +87,19 @@ static int pktlog_release(struct inode *i, struct file *f);
 static ssize_t pktlog_read(struct file *file, char *buf, size_t nbytes,
 			   loff_t * ppos);
 
-static struct file_operations pktlog_fops = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+static struct proc_ops pktlog_ops = {
+	proc_open:pktlog_open,
+	proc_release:pktlog_release,
+	proc_read:pktlog_read,
+};
+#else
+static struct file_operations pktlog_ops = {
 	open:pktlog_open,
 	release:pktlog_release,
 	read:pktlog_read,
 };
+#endif
 
 /*
  * Linux implementation of helper functions
@@ -496,7 +504,7 @@ static int pktlog_attach(struct ol_softc *scn)
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,0)
 	proc_entry = proc_create_data(proc_name, PKTLOG_PROC_PERM,
-				      g_pktlog_pde, &pktlog_fops,
+				      g_pktlog_pde, &pktlog_ops,
 				      &pl_info_lnx->info);
 
 	if (proc_entry == NULL) {
@@ -518,7 +526,7 @@ static int pktlog_attach(struct ol_softc *scn)
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,31)
 	proc_entry->owner = THIS_MODULE;
 #endif
-	proc_entry->proc_fops = &pktlog_fops;
+	proc_entry->proc_fops = &pktlog_ops;
 #endif
 
 	pl_info_lnx->proc_entry = proc_entry;
diff --git a/CORE/VOSS/inc/vos_cnss.h b/CORE/VOSS/inc/vos_cnss.h
index af558212a..67f8dae9d 100644
--- a/CORE/VOSS/inc/vos_cnss.h
+++ b/CORE/VOSS/inc/vos_cnss.h
@@ -42,6 +42,10 @@
 #include <linux/workqueue.h>
 #include <linux/sched.h>
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,7,0)
+#define PM_QOS_CPU_DMA_LATENCY 1
+#endif
+
 enum cnss_bus_width_type {
 	CNSS_BUS_WIDTH_NONE,
 	CNSS_BUS_WIDTH_LOW,
@@ -157,9 +161,9 @@ static inline int vos_wlan_pm_control(bool vote)
 static inline void vos_lock_pm_sem(void) { return; }
 static inline void vos_release_pm_sem(void) { return; }
 
-static inline void vos_get_boottime_ts(struct timespec *ts)
+static inline void vos_get_boottime_ts(struct timespec64 *ts)
 {
-	ktime_get_ts(ts);
+	ktime_get_ts64(ts);
 }
 
 static inline void *vos_get_virt_ramdump_mem(struct device *dev,
@@ -373,7 +377,7 @@ static inline int vos_wlan_get_dfs_nol(void *info, u16 info_len)
 	return cnss_wlan_get_dfs_nol(info, info_len);
 }
 
-static inline void vos_get_boottime_ts(struct timespec *ts)
+static inline void vos_get_boottime_ts(struct timespec64 *ts)
 {
         cnss_get_boottime(ts);
 }
diff --git a/CORE/VOSS/src/vos_api.c b/CORE/VOSS/src/vos_api.c
index e32a4af1a..9d5ddcc98 100644
--- a/CORE/VOSS/src/vos_api.c
+++ b/CORE/VOSS/src/vos_api.c
@@ -3247,10 +3247,7 @@ void vos_svc_fw_shutdown_ind(struct device *dev)
 
 v_U64_t vos_get_monotonic_boottime_ns(void)
 {
-	struct timespec ts;
-
-	ktime_get_ts(&ts);
-	return timespec_to_ns(&ts);
+	return ktime_get_ns();
 }
 
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 3, 0))
diff --git a/CORE/VOSS/src/vos_packet.c b/CORE/VOSS/src/vos_packet.c
index 0c8209e95..6e5129804 100644
--- a/CORE/VOSS/src/vos_packet.c
+++ b/CORE/VOSS/src/vos_packet.c
@@ -369,7 +369,7 @@ void vos_pkt_trace_dump_slot_buf(int slot)
 
 	local_time = (u32)(trace_buffer[slot].event_sec_time -
 		(sys_tz.tz_minuteswest * 60));
-	rtc_time_to_tm(local_time, &tm);
+	rtc_time64_to_tm(local_time, &tm);
 	VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
 		"%5d : [%02d:%02d:%02d.%06lu] : %s",
 		trace_buffer[slot].order,
diff --git a/CORE/VOSS/src/vos_timer.c b/CORE/VOSS/src/vos_timer.c
index 3adf1427b..2e7aea6fc 100644
--- a/CORE/VOSS/src/vos_timer.c
+++ b/CORE/VOSS/src/vos_timer.c
@@ -913,7 +913,7 @@ unsigned long vos_get_time_of_the_day_ms(void)
 
 	ktime_get_real_ts64(&tv);
 	local_time = (unsigned long)(tv.tv_sec - (sys_tz.tz_minuteswest * 60));
-	rtc_time_to_tm(local_time, &tm);
+	rtc_time64_to_tm(local_time, &tm);
 
 	return (tm.tm_hour * 60 * 60 * 1000) +
 		(tm.tm_min * 60 * 1000) + (tm.tm_sec * 1000) +
@@ -930,7 +930,7 @@ unsigned long vos_get_time_of_the_day_ms(void)
 
 	local_time = (uint32_t)(tv.tv_sec -
 		(sys_tz.tz_minuteswest * 60));
-	rtc_time_to_tm(local_time, &tm);
+	rtc_time64_to_tm(local_time, &tm);
 	return ((tm.tm_hour * 60 * 60 * 1000) +
 		(tm.tm_min *60 * 1000) + (tm.tm_sec * 1000)+
 		(tv.tv_usec/1000));
@@ -948,7 +948,7 @@ void vos_get_time_of_the_day_in_hr_min_sec_usec(char *tbuf, int len)
 	ktime_get_real_ts64(&tv);
 	/* Convert rtc to local time */
 	local_time = (u32)(tv.tv_sec - (sys_tz.tz_minuteswest * 60));
-	rtc_time_to_tm(local_time, &tm);
+	rtc_time64_to_tm(local_time, &tm);
 	scnprintf(tbuf, len,
 		  "[%02d:%02d:%02d.%06lu]",
 		  tm.tm_hour, tm.tm_min, tm.tm_sec, tv.tv_nsec / 1000);
@@ -964,7 +964,7 @@ void vos_get_time_of_the_day_in_hr_min_sec_usec(char *tbuf, int len)
        do_gettimeofday(&tv);
        /* Convert rtc to local time */
        local_time = (u32)(tv.tv_sec - (sys_tz.tz_minuteswest * 60));
-       rtc_time_to_tm(local_time, &tm);
+       rtc_time64_to_tm(local_time, &tm);
        snprintf(tbuf, len,
                "[%02d:%02d:%02d.%06lu] ",
                tm.tm_hour, tm.tm_min, tm.tm_sec, tv.tv_usec);
-- 
2.25.1

