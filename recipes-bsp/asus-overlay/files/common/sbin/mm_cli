#!/bin/bash
# VERSION=1.2_20211221
AT_PORT=/dev/ttyUSB2
ACK=/etc/mm/mm_ack
CONFIG_PATH=/etc/mm
CONFIG_FILE=${CONFIG_PATH}/mm.conf
TAG="mm_cli"

check_config() {
    # Check config exists
    if [ ! -e ${CONFIG_PATH} ] ; then
        mkdir $CONFIG_PATH
    fi

    if [ ! -e ${CONFIG_FILE} ] ; then
        $0 reset
    fi
}

send_at_command() {
    if [ -e ${AT_PORT} ]; then
        echo -ne "${1}\r" | busybox microcom -t 2000 ${AT_PORT} > ${ACK}
    else
        log "ERROR device not found"
        exit 1
    fi
}

check_sim_detect() {
    send_at_command "AT+QSIMDET?"
    res=`cat ${ACK} | tr -d '\r'`
    res=`echo ${res##*\ }`
    res=`echo ${res%%,*}`
    echo $res
}

set_sim_detect() {
    res=$(check_sim_detect)
    if [ "$res" != "$1" ]; then
        send_at_command "AT+QSIMDET=${1},0"
        send_at_command "AT+CFUN=1,1"
        exit 0
    else
        log "Already is ${1}"
    fi
}

set_wakeup() {
    if [ "$1" == "1" ]; then
        send_at_command 'AT+QCFG="risignaltype","physical"'
        send_at_command 'AT+QCFG="urc/ri/ring","auto"'
        send_at_command 'AT+QCFG="urc/ri/smsincoming","pulse"'
        send_at_command 'AT+QCFG="urc/ri/other","off"'
    else
        send_at_command 'AT+QCFG="risignaltype","respective"'
        send_at_command 'AT+QCFG="urc/ri/ring","pulse"'
        send_at_command 'AT+QCFG="urc/ri/smsincoming","off"'
        send_at_command 'AT+QCFG="urc/ri/other","off"'
    fi
}

stop_modem_manager() {
    if systemctl stop ModemManager &> /dev/null; then
        while mmcli -B &> /dev/null; do
            sleep 1
        done
    else
        log "Error, please try again later"
        exit 1
    fi
}

start_modem_manager() {
    version=$(cat /etc/version)
    if [[ "${version^^}" =~ "FACTORY" ]]; then
        log "build version is factory, no modemmanager needed"
        exit 0
    elif systemctl start ModemManager &> /dev/null; then
        until mmcli -B &> /dev/null; do
            sleep 1
        done
    else
        log "Error, please try again later"
        exit 1
    fi
}

check_sim_slot() {
    if [ ! -e /sbin/ex_gpio ]; then
        log "Not supported"
        exit 1
    fi
    res=`echo $(ex_gpio -s)`
    res=`echo ${res##*use\ }`
    res=`echo ${res%%slot*}`
    echo $res
}

reboot() {
    if mmcli -L -K | grep 'modem-list.value' &>/dev/null; then
        modem=$(mmcli -L -K | grep 'modem-list.value' | awk -F ": " '{ print $2 }')
        mmcli -m $modem -r
        mmcli -m $modem -w &> /dev/null
        until mmcli -L -K | grep 'modem-list.value' &>/dev/null; do
            sleep 1
        done
    else
        log "Modem not found"
    fi
}

log() {
    echo ${1}
    logger -t ${TAG} ${1}
}

case $1 in
pin)
    if [ "$2" == "" ]; then
        . $CONFIG_FILE
        echo $PIN
    else
        check_config
        sed -i "s/\(PIN *= *\).*/\1$2/" $CONFIG_FILE
    fi
    ;;
set-sim)
    board=$(cat /proc/boardinfo)
    log "Start as ${board}"
    case "$board" in
    "PV100A")
        if ex_gpio -s ${2}; then
            if [ "$2" == "sim1" ]; then
                stop_modem_manager
                set_sim_detect 1
                start_modem_manager
            elif [ "$2" == "sim2" ]; then
                stop_modem_manager
                set_sim_detect 0
                start_modem_manager
            fi
        else
            log "Error"
        fi
        ;;
    *"PE1000N"*)
        ex_gpio -s ${2}
        ;;
    *)
        log "Not supported"
        exit 1
        ;;
    esac
    ;;
sim-detect)
    case "$2" in
    "0"|"1")
        stop_modem_manager
        check_config
        sed -i "s/\(USER_SIM_DETECT *= *\).*/\1y/" $CONFIG_FILE
        set_sim_detect $2
        start_modem_manager
        ;;
    *)
        stop_modem_manager
        echo $(check_sim_detect)
        start_modem_manager
        ;;
    esac
    ;;
reboot-module)
    reboot
    ;;
reset)
    touch $CONFIG_PATH
    echo "PIN=0000" > $CONFIG_FILE
    echo "RETRY_TIME=(2, 5, 10, 20, 40, 80, 160, 320, 640, 1280, 1800)" >> $CONFIG_FILE
    echo "RETRY_RANDOM=(1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5)" >> $CONFIG_FILE
    echo "USER_ACTION_FLAG=y" >> $CONFIG_FILE
    echo "USER_SIM_DETECT=n" >> $CONFIG_FILE
    ;;
start)
    board=$(cat /proc/boardinfo)
    log "Start as ${board}, stop modemmanager first..."
    stop_modem_manager
    case "$board" in
    "PE100A")
        . $CONFIG_FILE
        if [ "$USER_SIM_DETECT" == "n" ]; then
            log "Use default sim detect settings"
            set_sim_detect 0
        else
            log "User had set sim detect before, keep the change"
        fi
        ;;
    "PV100A")
        enable=$(check_sim_detect)
        log "Check sim detect = ${enable}"
        slot=$(check_sim_slot)
        log "Check sim slot = ${slot}"
        if [ "$enable" == "0" ] && [ "$slot" == "sim1" ]; then
            # enable sim detect when using sim slot 0
            log "Enable sim detect"
            set_sim_detect 1
            exit 1
        elif [ "$enable" == "1" ] && [ "$slot" == "sim2" ]; then
            # disable sim detect when using sim slot 1
            log "Disable sim detect"
            set_sim_detect 0
            exit 1
        fi
        ;;
    "Tinker Edge R")
        boardVer=$(cat /proc/boardver)
        log "boardVer = ${boardVer}"
        enable=$(check_sim_detect)
        log "Check sim detect = ${enable}"
        check=$(echo "${boardVer} >= 1.04" | bc)
        if [ "$check" == "1" ]; then
            # enable sim detect when board version >= 1.04
            if [ "$enable" == "0" ]; then
                log "Enable sim detect"
                set_sim_detect 1
                exit 1
            fi
        else
            # disable sim detect when board version < 1.04
            if [ "$enable" == "1" ]; then
                log "Disable sim detect"
                set_sim_detect 0
                exit 1
            fi
        fi
        ;;
    *"PE1000N"*)
        log "Enable wakeup"
        set_wakeup 1
        log "Enable sim detect"
        set_sim_detect 1
        ;;
    *)
        log "Nothing to do with board = ${board}"
        ;;
    esac
    log "Check pass"
    start_modem_manager
    log "Start modemmanager..."
    dbus-send --system --type=signal / org.freedesktop.ModemManager1.Modem.StateChanged int32:0
    ;;
stop)
    log "=== Disconnect ==="
    ;;
set-wakeup)
    case "$2" in
    "0"|"1")
        stop_modem_manager
        set_wakeup $2
        wakeup_source_test $2 7 &> /dev/null
        start_modem_manager
        ;;
    *)
        log "Parameter error"
        ;;
    esac
    ;;
*)
    echo "Usage: mm_cli [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  pin                   :           Get current default pin"
    echo "  pin [pin]             :           Set pin for unlock if needed when bootup"
    echo "  reset                 :           Reset to default pin 0000"
    echo "  set-sim               :           Check current sim slot, only available at PV100A and PE1000N"
    echo "  set-sim [sim1/sim2]   :           Set sim slot and reboot module, only available at PV100A and PE1000N"
    echo "  reboot-module         :           Reboot module"
    echo "  set-wakeup [0/1]      :           Set wakeup function"
    echo "  sim-detect            :           Get sim-detect status"
    echo "  sim-detect [0/1]      :           Set sim-detect status"
    echo ""
    exit 1
    ;;
esac
