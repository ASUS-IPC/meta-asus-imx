# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_edgetpu_cpp_wrapper', [dirname(__file__)])
        except ImportError:
            import _edgetpu_cpp_wrapper
            return _edgetpu_cpp_wrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_edgetpu_cpp_wrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _edgetpu_cpp_wrapper = swig_import_helper()
    del swig_import_helper
else:
    import _edgetpu_cpp_wrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class BasicEnginePythonWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicEnginePythonWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicEnginePythonWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _edgetpu_cpp_wrapper.new_BasicEnginePythonWrapper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Init(self, *args):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_Init(self, *args)

    def RunInference(self, input):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_RunInference(self, input)

    def get_input_tensor_shape(self):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_get_input_tensor_shape(self)

    def get_all_output_tensors_sizes(self):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_get_all_output_tensors_sizes(self)

    def get_num_of_output_tensors(self):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_get_num_of_output_tensors(self)

    def get_output_tensor_size(self, tensor_index):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_get_output_tensor_size(self, tensor_index)

    def required_input_array_size(self):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_required_input_array_size(self)

    def total_output_array_size(self):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_total_output_array_size(self)

    def get_raw_output(self):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_get_raw_output(self)

    def get_inference_time(self):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_get_inference_time(self)

    def model_path(self):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_model_path(self)

    def device_path(self):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_device_path(self)
    __swig_getmethods__["CreateFromFile"] = lambda x: _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_CreateFromFile
    if _newclass:
        CreateFromFile = staticmethod(_edgetpu_cpp_wrapper.BasicEnginePythonWrapper_CreateFromFile)

    def RunInferenceBytes(self, input_obj):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_RunInferenceBytes(self, input_obj)

    def RunInferenceRaw(self, input_obj, size_obj):
        return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_RunInferenceRaw(self, input_obj, size_obj)
    __swig_destroy__ = _edgetpu_cpp_wrapper.delete_BasicEnginePythonWrapper
    __del__ = lambda self: None
BasicEnginePythonWrapper_swigregister = _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_swigregister
BasicEnginePythonWrapper_swigregister(BasicEnginePythonWrapper)

def BasicEnginePythonWrapper_CreateFromFile(*args):
    return _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_CreateFromFile(*args)
BasicEnginePythonWrapper_CreateFromFile = _edgetpu_cpp_wrapper.BasicEnginePythonWrapper_CreateFromFile

class ImprintingEnginePythonWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImprintingEnginePythonWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImprintingEnginePythonWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _edgetpu_cpp_wrapper.new_ImprintingEnginePythonWrapper()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Init(self, model_path, keep_classes):
        return _edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_Init(self, model_path, keep_classes)

    def SaveModel(self, output_path):
        return _edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_SaveModel(self, output_path)

    def Train(self, input, class_id):
        return _edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_Train(self, input, class_id)

    def RunInference(self, input):
        return _edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_RunInference(self, input)

    def get_inference_time(self):
        return _edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_get_inference_time(self)
    __swig_getmethods__["CreateFromFile"] = lambda x: _edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_CreateFromFile
    if _newclass:
        CreateFromFile = staticmethod(_edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_CreateFromFile)
    __swig_destroy__ = _edgetpu_cpp_wrapper.delete_ImprintingEnginePythonWrapper
    __del__ = lambda self: None
ImprintingEnginePythonWrapper_swigregister = _edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_swigregister
ImprintingEnginePythonWrapper_swigregister(ImprintingEnginePythonWrapper)

def ImprintingEnginePythonWrapper_CreateFromFile(model_path, keep_classes):
    return _edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_CreateFromFile(model_path, keep_classes)
ImprintingEnginePythonWrapper_CreateFromFile = _edgetpu_cpp_wrapper.ImprintingEnginePythonWrapper_CreateFromFile


def GetRuntimeVersion():
    """
    Returns the Edge TPU runtime (libedgetpu.so) version.

    Compare this version to the value of
    :attr:`~edgetpu.swig.edgetpu_cpp_wrapper.edgetpu.basic.edgetpu_utils.SUPPORTED_RUNTIME_VERSION`,
    which is the runtime version required by your Edge TPU library version.

    This runtime version is dynamically retrieved from the shared object.

    Returns:
      A string for the version name.
    """
    return _edgetpu_cpp_wrapper.GetRuntimeVersion()

_edgetpu_cpp_wrapper.EdgeTpuState_kNone_swigconstant(_edgetpu_cpp_wrapper)
EdgeTpuState_kNone = _edgetpu_cpp_wrapper.EdgeTpuState_kNone

_edgetpu_cpp_wrapper.EdgeTpuState_kAssigned_swigconstant(_edgetpu_cpp_wrapper)
EdgeTpuState_kAssigned = _edgetpu_cpp_wrapper.EdgeTpuState_kAssigned

_edgetpu_cpp_wrapper.EdgeTpuState_kUnassigned_swigconstant(_edgetpu_cpp_wrapper)
EdgeTpuState_kUnassigned = _edgetpu_cpp_wrapper.EdgeTpuState_kUnassigned

def ListEdgeTpuPaths(state):
    """
    Lists the paths for all available Edge TPU devices.

    Args:
      state (int): The current state of devices you want to list. It can be one of
        :attr:`~edgetpu.swig.edgetpu_cpp_wrapper.edgetpu.basic.edgetpu_utils.EDGE_TPU_STATE_ASSIGNED`,
        :attr:`~edgetpu.swig.edgetpu_cpp_wrapper.edgetpu.basic.edgetpu_utils.EDGE_TPU_STATE_UNASSIGNED`,
        or :attr:`~edgetpu.swig.edgetpu_cpp_wrapper.edgetpu.basic.edgetpu_utils.EDGE_TPU_STATE_NONE`.

    Returns:
      A tuple of strings, each representing a device path.

    """
    return _edgetpu_cpp_wrapper.ListEdgeTpuPaths(state)

def AppendFullyConnectedAndSoftmaxLayerToModel(in_model_path, out_model_path, weights, biases, out_tensor_min, out_tensor_max):
    """
    Appends Fully-connected (FC) and softmax layer to input tflite model.

    This function assumes the input tflite model is an embedding extractor, e.g., a
    classification model without the last FC+Softmax layer. It does the following:
      *) Quantizes learned weights and biases from float32 to uint8;
      *) Appends quantized weights and biases as FC layer;
      *) Adds a Softmax layer;
      *) Stores the result in tflite file format specified by `out_model_path`;

    Args:
      in_model_path: string, path to input tflite model;
      out_model_path: string, path to output tflite model;
      weights: 1 dimensional float32 np.ndarray, flattened learned weights. Learned
        weights is a num_classes x embedding_vector_dim matrix;
      biases: 1 dimensional float32 np.ndarray of length num_classes;
      out_tensor_min: float, expected min value of FC layer, for quantization parameter;
      out_tensor_max: float, expected max value of FC layer, for quantization parameter;

    Raises:
      RuntimeError: with corresponding reason for failure.

    """
    return _edgetpu_cpp_wrapper.AppendFullyConnectedAndSoftmaxLayerToModel(in_model_path, out_model_path, weights, biases, out_tensor_min, out_tensor_max)
# This file is compatible with both classic and new-style classes.

cvar = _edgetpu_cpp_wrapper.cvar
kEdgeTpuCppWrapperVersion = cvar.kEdgeTpuCppWrapperVersion
kSupportedRuntimeVersion = cvar.kSupportedRuntimeVersion

